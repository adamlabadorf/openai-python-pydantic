# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from pydantic import BaseModel, Field
from typing import List, Optional

from typing_extensions import Literal

__all__ = ["ResponseFunctionToolCallParam"]


class ResponseFunctionToolCallParam(BaseModel):
    arguments: "str"= None
    
    """A JSON string of the arguments to pass to the function."""

    call_id: "str"= None
    
    """The unique ID of the function tool call generated by the model."""

    name: "str"= None
    
    """The name of the function to run."""

    type: "Literal['function_call']"= None
    
    """The type of the function tool call. Always `function_call`."""

    id: "Optional[str]"= None
    
    """The unique ID of the function tool call."""

    status: "Optional[Literal['in_progress', 'completed', 'incomplete']]"= None
    
    """The status of the item.

    One of `in_progress`, `completed`, or `incomplete`. Populated when items are
    returned via API.
    """
ResponseFunctionToolCallParam.model_rebuild()

