# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable, Optional
from typing_extensions import Literal
from pydantic import BaseModel
from .chat_completion_content_part_text_param import ChatCompletionContentPartTextParam
from .chat_completion_message_tool_call_param import ChatCompletionMessageToolCallParam
from .chat_completion_content_part_refusal_param import ChatCompletionContentPartRefusalParam

__all__ = ["ChatCompletionAssistantMessageParam", "Audio", "ContentArrayOfContentPart", "FunctionCall"]


class Audio(BaseModel):
    id: Optional[str] = None
    # old  id: Optional[str] = None
    # old  id: str = None
    # old  id: Required[str]
    """Unique identifier for a previous audio response from the model."""


ContentArrayOfContentPart = Union[ChatCompletionContentPartTextParam, ChatCompletionContentPartRefusalParam] # old ContentArrayOfContentPart: TypeAlias = Union[ChatCompletionContentPartTextParam, ChatCompletionContentPartRefusalParam]


class FunctionCall(BaseModel):
    arguments: Optional[str] = None
    # old  arguments: Optional[str] = None
    # old  arguments: str = None
    # old  arguments: Required[str]
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: Optional[str] = None
    # old  name: Optional[str] = None
    # old  name: str = None
    # old  name: Required[str]
    """The name of the function to call."""


class ChatCompletionAssistantMessageParam(BaseModel):
    role: Optional[Literal["assistant"]] = None
    # old  role: Optional[Literal["assistant"]] = None
    # old  role: Literal["assistant"] = None
    # old  role: Required[Literal["assistant"]]
    """The role of the messages author, in this case `assistant`."""

    audio: Optional[Audio] = None
    # old  audio: Optional[Audio] = None
    # old  audio: Optional[Audio] = None
    # old  audio: Optional[Audio]
    """Data about a previous audio response from the model.

    [Learn more](https://platform.openai.com/docs/guides/audio).
    """

    content: Optional[Union[str, List[ContentArrayOfContentPart], None]] = None
    # old  content: Optional[Union[str, List[ContentArrayOfContentPart], None]] = None
    # old  content: Optional[Union[str, List[ContentArrayOfContentPart], None]] = None
    # old  content: Union[str, Iterable[ContentArrayOfContentPart], None]
    """The contents of the assistant message.

    Required unless `tool_calls` or `function_call` is specified.
    """

    function_call: Optional[FunctionCall] = None
    # old  function_call: Optional[FunctionCall] = None
    # old  function_call: Optional[FunctionCall] = None
    # old  function_call: Optional[FunctionCall]
    """Deprecated and replaced by `tool_calls`.

    The name and arguments of a function that should be called, as generated by the
    model.
    """

    name: Optional[str] = None
    # old  name: Optional[str] = None
    # old  name: Optional[str] = None
    # old  name: str
    """An optional name for the participant.

    Provides the model information to differentiate between participants of the same
    role.
    """

    refusal: Optional[str] = None
    # old  refusal: Optional[str] = None
    # old  refusal: Optional[str] = None
    # old  refusal: Optional[str]
    """The refusal message by the assistant."""

    tool_calls: Optional[List[ChatCompletionMessageToolCallParam]] = None
    # old  tool_calls: Optional[List[ChatCompletionMessageToolCallParam]] = None
    # old  tool_calls: Optional[List[ChatCompletionMessageToolCallParam]] = None
    # old  tool_calls: Iterable[ChatCompletionMessageToolCallParam]
    """The tool calls generated by the model, such as function calls."""



