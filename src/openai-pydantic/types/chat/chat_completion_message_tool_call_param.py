# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing_extensions import Literal
from pydantic import BaseModel
__all__ = ["ChatCompletionMessageToolCallParam", "Function"]


class Function(BaseModel):
    arguments: Optional[str] = None
    # old  arguments: str = None
    # old  arguments: Required[str]
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: Optional[str] = None
    # old  name: str = None
    # old  name: Required[str]
    """The name of the function to call."""


class ChatCompletionMessageToolCallParam(BaseModel):
    id: Optional[str] = None
    # old  id: str = None
    # old  id: Required[str]
    """The ID of the tool call."""

    function: Optional[Function] = None
    # old  function: Function = None
    # old  function: Required[Function]
    """The function that the model called."""

    type: Optional[Literal["function"]] = None
    # old  type: Literal["function"] = None
    # old  type: Required[Literal["function"]]
    """The type of the tool. Currently, only `function` is supported."""


